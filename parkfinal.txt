#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <windows.h>
#include <conio.h>
struct jag
{
    int len;
    int arr[50];
} j[9];
struct extra_veh
{
    char extra[10];
} ex[4];

void addvehicle()
{
    int c, i, num_plate, cat;
    printf("how many vehicles categories does your parking lot have?(at least 5)\n");
    scanf("%d", &cat);
    if (cat == 5)
    {
        printf("Which type of vehicle do yo want to enter?");
        printf("\n1.Big\n2.Small\n3.Medium\n4.Elecric\n5.Commercial\n");
    }
    else if (cat == 6)
    {
        printf("Which type of vehicle do yo want to enter?");
        printf("\n1.Big\n2.Small\n3.Medium\n4.Elecric\n5.Commercial\n6.%s\n", ex[0].extra);
    }
    else if (cat == 7)
    {
        printf("Which type of vehicle do yo want to enter?");
        printf("\n1.Big\n2.Small\n3.Medium\n4.Elecric\n5.Commercial\n6.%s\n7.%s\n", ex[0].extra, ex[1].extra);
    }
    else if (cat == 8)
    {
        printf("Which type of vehicle do yo want to enter?");
        printf("\n1.Big\n2.Small\n3.Medium\n4.Elecric\n5.Commercial\n6.%s\n7.%s\n8.%s\n", ex[0].extra, ex[1].extra, ex[2].extra);
    }
    else if (cat == 9)
    {
        printf("Which type of vehicle do yo want to enter?");
        printf("\n1.Big\n2.Small\n3.Medium\n4.Elecric\n5.Commercial\n6.%s\n7.%s\n8.%s\n9.%s\n", ex[0].extra, ex[1].extra, ex[2].extra, ex[3].extra);
    }
    else if (cat == 10)
    {
        printf("Which type of vehicle do yo want to enter?");
        printf("\n1.Big\n2.Small\n3.Medium\n4.Elecric\n5.Commercial\n6.%s\n7.%s\n8.%s\n9.%s\n10.%s\n", ex[0].extra, ex[1].extra, ex[2].extra, ex[3].extra, ex[4].extra);
    }
    else
    {
        printf("Invalid choice!\n");
    }
    scanf("%d", &c);
    switch (c)
    {
    case 1:
        for (i = 0; i < j[0].len; i++)
        {
            if (j[0].arr[i] == 0)
            {
                printf("Enter vehicle number: ");
                scanf("%d", &j[0].arr[i]);
                printf("Parked in spot %d\n", i + 1);
                break;
            }
        }
        if (i == j[0].len)
        {
            printf("Parking lot is full for big sized vehicles\n");
        }
        break;
    case 2:
        for (i = 0; i < j[1].len; i++)
        {
            if (j[1].arr[i] == 0)
            {
                printf("Enter vehicle number: ");
                scanf("%d", &j[1].arr[i]);
                printf("Parked in spot %d\n", i + 1);
                break;
            }
        }
        if (i == j[1].len)
        {
            printf("Parking lot is full for small sized vehicles\n");
        }
        break;
    case 3:
        for (i = 0; i < j[2].len; i++)
        {
            if (j[2].arr[i] == 0)
            {
                printf("Enter vehicle number: ");
                scanf("%d", &j[2].arr[i]);
                printf("Parked in spot %d\n", i + 1);
                break;
            }
        }
        if (i == j[2].len)
        {
            printf("Parking lot is full for medium sized vehicles\n");
        }
        break;
    case 4:
        for (i = 0; i < j[3].len; i++)
        {
            if (j[3].arr[i] == 0)
            {
                printf("Enter vehicle number: ");
                scanf("%d", &j[3].arr[i]);
                printf("Parked in spot %d\n", i + 1);
                break;
            }
        }
        if (i == j[3].len)
        {
            printf("Parking lot is full for electric vehicles\n");
        }
        break;
    case 5:
        for (i = 0; i < j[4].len; i++)
        {
            if (j[4].arr[i] == 0)
            {
                printf("Enter vehicle number: ");
                scanf("%d", &j[4].arr[i]);
                printf("Parked in spot %d\n", i + 1);
                break;
            }
        }
        if (i == j[4].len)
        {
            printf("Parking lot is full for commercial vehicles\n");
        }
        break;
    case 6:
        for (i = 0; i < j[5].len; i++)
        {
            if (j[5].arr[i] == 0)
            {
                printf("Enter vehicle number: ");
                scanf("%d", &j[5].arr[i]);
                printf("Parked in spot %d\n", i + 1);
                break;
            }
        }
        if (i == j[5].len)
        {
            printf("Parking lot is full for commercial vehicles\n");
        }
        break;
    case 7:
        for (i = 0; i < j[6].len; i++)
        {
            if (j[6].arr[i] == 0)
            {
                printf("Enter vehicle number: ");
                scanf("%d", &j[6].arr[i]);
                printf("Parked in spot %d\n", i + 1);
                break;
            }
        }
        if (i == j[6].len)
        {
            printf("Parking lot is full for commercial vehicles\n");
        }
        break;
    case 8:
        for (i = 0; i < j[7].len; i++)
        {
            if (j[7].arr[i] == 0)
            {
                printf("Enter vehicle number: ");
                scanf("%d", &j[7].arr[i]);
                printf("Parked in spot %d\n", i + 1);
                break;
            }
        }
        if (i == j[7].len)
        {
            printf("Parking lot is full for commercial vehicles\n");
        }
        break;
    case 9:
        for (i = 0; i < j[8].len; i++)
        {
            if (j[8].arr[i] == 0)
            {
                printf("Enter vehicle number: ");
                scanf("%d", &j[8].arr[i]);
                printf("Parked in spot %d\n", i + 1);
                break;
            }
        }
        if (i == j[8].len)
        {
            printf("Parking lot is full for commercial vehicles\n");
        }
        break;
    case 10:
        for (i = 0; i < j[9].len; i++)
        {
            if (j[9].arr[i] == 0)
            {
                printf("Enter vehicle number: ");
                scanf("%d", &j[9].arr[i]);
                printf("Parked in spot %d\n", i + 1);
                break;
            }
        }
        if (i == j[9].len)
        {
            printf("Parking lot is full for commercial vehicles\n");
        }
        break;
    default:
        break;
    }
}
void park_diff_cat_veh()
{
    int n, i, k, num_plate;
    char ch;
    printf("How many types of vehivles do you want to add?(upto 5)\n");
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
    {
        printf("Enter type of vehicle you want to add\n");
        scanf("%s", ex[i].extra);
        printf("Assign space for %s type of vehicle\n", ex[i].extra);
        scanf("%d", &j[5 + i].len);
    }
}
void fill()
{
    srand(time(0));
    int num1;
    printf("This function generates random number of vehicles\n");
    printf("It maybe used to check demand on a random day\n");
    for (int i = 0; i < 5; i++)
    {
        num1 = rand() % j[i].len + 0;
        for (int k = 0; k < num1; k++)
        {
            j[i].arr[k] = rand() % 9999 + 0;
        }
    }
}
void departure()
{
    int spot, c, num_plate,type;
    for (int i = 0; i < 10; i++)
    {
        printf("Which type of vehicle do you want to delete?");
        scanf("%d", &type);
        printf("Enter vehicle number\n");
        scanf("%d", &num_plate);
        spot = 0;
        i=type-1;
        if (i == 0)
        {
            for (int k = 0; k < j[i].len; k++)
            {
                if (j[i].arr[k] == num_plate)
                {
                    printf("Vehicle removed from spot %d\n", k + 1);
                    j[i].arr[k] = 0;
                    spot = 1;
                    break;
                }
            }
            if (spot == 0)
            {
                printf("Vehicle not found\n");
            }
            break;
        }

        if (i == 1)
        {
            for (int k = 0; k < j[i].len; k++)
            {
                if (j[i].arr[k] == num_plate)
                {
                    printf("Vehicle removed from spot %d\n", k + 1);
                    j[i].arr[k] = 0;
                    spot = 1;
                    break;
                }
            }
            if (spot == 0)
            {
                printf("Vehicle not found\n");
            }
            break;
        }

        if (i == 2)
        {
            for (int k = 0; k < j[i].len; k++)
            {
                if (j[i].arr[k] == num_plate)
                {
                    printf("Vehicle removed from spot %d\n", k + 1);
                    j[i].arr[k] = 0;
                    spot = 1;
                    break;
                }
            }
            if (spot == 0)
            {
                printf("Vehicle not found\n");
            }
            break;
        }

        if (i == 3)
        {
            for (int k = 0; k < j[i].len; k++)
            {
                if (j[i].arr[k] == num_plate)
                {
                    printf("Vehicle removed from spot %d\n", k + 1);
                    j[i].arr[k] = 0;
                    spot = 1;
                    break;
                }
            }
            if (spot == 0)
            {
                printf("Vehicle not found\n");
            }
            break;
        }

        if (i == 4)
        {
            for (int k = 0; k < j[i].len; k++)
            {
                if (j[i].arr[k] == num_plate)
                {
                    printf("Vehicle removed from spot %d\n", k + 1);
                    j[i].arr[k] = 0;
                    spot = 1;
                    break;
                }
            }
            if (spot == 0)
            {
                printf("Vehicle not found\n");
            }
            break;
        }
        if (i == 5)
        {
            for (int k = 0; k < j[i].len; k++)
            {
                if (j[i].arr[k] == num_plate)
                {
                    printf("Vehicle removed from spot %d\n", k + 1);
                    j[i].arr[k] = 0;
                    spot = 1;
                    break;
                }
            }
            if (spot == 0)
            {
                printf("Vehicle not found\n");
            }
            break;
        }
        if (i == 6)
        {
            for (int k = 0; k < j[i].len; k++)
            {
                if (j[i].arr[k] == num_plate)
                {
                    printf("Vehicle removed from spot %d\n", k + 1);
                    j[i].arr[k] = 0;
                    spot = 1;
                    break;
                }
            }
            if (spot == 0)
            {
                printf("Vehicle not found\n");
            }
            break;
        }
        if (i == 7)
        {
            for (int k = 0; k < j[i].len; k++)
            {
                if (j[i].arr[k] == num_plate)
                {
                    printf("Vehicle removed from spot %d\n", k + 1);
                    j[i].arr[k] = 0;
                    spot = 1;
                    break;
                }
            }
            if (spot == 0)
            {
                printf("Vehicle not found\n");
            }
            break;
        }
        if (i == 8)
        {
            for (int k = 0; k < j[i].len; k++)
            {
                if (j[i].arr[k] == num_plate)
                {
                    printf("Vehicle removed from spot %d\n", k + 1);
                    j[i].arr[k] = 0;
                    spot = 1;
                    break;
                }
            }
            if (spot == 0)
            {
                printf("Vehicle not found\n");
            }
            break;
        }
        if (i == 9)
        {
            for (int k = 0; k < j[i].len; k++)
            {
                if (j[i].arr[k] == num_plate)
                {
                    printf("Vehicle removed from spot %d\n", k + 1);
                    j[i].arr[k] = 0;
                    spot = 1;
                    break;
                }
            }
            if (spot == 0)
            {
                printf("Vehicle not found\n");
            }
            break;
        }
    }
}
void display()
{
    for (int i = 0; i < 5; i++)
    {
        if(i==0)
            printf("Big sized vehicles:\n");
        else if(i==1)
            printf("Small sized vehicles:\n");
        else if(i==2)
            printf("Medium sized vehicles:\n");
        else if(i==3)
            printf("Electric vehicles:\n");
        else if(i==4)
            printf("Commercial vehicles:\n");
        for (int k = 0; k < j[i].len; k++)
        {
            
            printf("%d\t", j[i].arr[k]);
            if (k == 19 || k == 39)
            {
                printf("\n");
            }
        }
        printf("\n");
    }
}
void disp_cat()
{
    int cat;
    printf("How many types of vehicles can in alloted in the parking lot\n");
    scanf("%d",&cat);
    for (int i = 0; i < cat; i++)
    {
        if(i==0)
            printf("Big sized vehicles:\n");
        else if(i==1)
            printf("Small sized vehicles:\n");
        else if(i==2)
            printf("Medium sized vehicles:\n");
        else if(i==3)
            printf("Electric vehicles:\n");
        else if(i==4)
            printf("Commercial vehicles:\n");
        else if(i==5)
        printf("%s vehicles:\n",ex[0].extra);
        else if(i==6)
        printf("%s vehicles:\n",ex[1].extra);
        else if(i==7)
        printf("%s vehicles:\n",ex[2].extra);
        else if(i==8)
        printf("%s vehicles:\n",ex[3].extra);
        else
        printf("%s vehicles:\n",ex[4].extra);
        for (int k = 0; k < j[i].len; k++)
        {
            printf("%d\t", j[i].arr[k]);
            if (k == 19 || k == 39)
            {
                printf("\n");
            }
        }
        printf("\n");
    }
}
void search_veh(){
    int num_plate,num,x,y;
    printf("Enter number plate of the vehicle\n");
    scanf("%d",&num_plate);
    for(int i=0;i<10;i++){
        for(int k=0;k<j[i].len;k++){
            if(j[i].arr[k]==num_plate)
            {
                num=1;
                x=i+1;
                y=k+1;
            }
        }
    }
    if(num==1)
        printf("Vehicle found in category %d and space %d\n", x, y);
    else
        printf("Vehicle not found\n");
}
void first_display()
{
    printf("\t\t\t\t----------------------------------------\n");
    printf("\t\t\t\t\tParking Lot Checker\n\n");
    printf("\t\t\t\t\tBy Bhavsar Nitya Jignesh\n\n");
    printf("\t\t\t\t\t1NH21CS047\n");
    printf("\t\t\t\t----------------------------------------");
    getch();
    system("cls");
}
int main()
{
    int choice, index, n, row_num,count=0;
    first_display();
    printf("Enter space to be allocated for big sized vehicles\n");
    scanf("%d", &j[0].len);
    printf("Enter space to be allocated for small sized vehicles vehicles\n");
    scanf("%d", &j[1].len);
    printf("Enter space to be allocated for medium sized vehicles\n");
    scanf("%d", &j[2].len);
    printf("Enter space to be allocated for electric vehicles\n");
    scanf("%d", &j[3].len);
    printf("Enter space to be allocated for commercial vehicles\n");
    scanf("%d", &j[4].len);
    for (int i = 0; i < 5; i++)
    {
        for (int k = 0; k < j[i].len; k++)
        {
            j[i].arr[k] = 0;
        }
    }

    while (1)
    {
        printf("1)Do u want to fill the lot randomly\n");
        printf("2)Add vehicle\n");
        printf("3)Departure of vehicle\n");
        printf("4)Total parked in fixed 5 categories\n");
        printf("5)Do you want to enter vehcile of different category?\n");
        printf("6)Displayes the parking lot including all the categories\n");
        printf("7)Search vehicle by number plate\n");
        printf("8)Exit\n");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            system("cls");
            fill();
            break;
        case 2:
            system("cls");
            addvehicle();
            break;
        case 3:
            system("cls");
            departure();
            break;
        case 4:
            system("cls");
            display();
            break;
        case 5:
            system("cls");
            if(count==0){
                park_diff_cat_veh();
                count=1;
            }
            else
                printf("This function can only be used one time\n");
            break;
        case 6:
            system("cls");
            disp_cat();
            break;
        case 7:
            system("cls");
            search_veh();  
            break;
        case 8:
            exit(0);
        default:
            printf("Invalid choice\n");
            break;
        }
    }
    return 0;
}